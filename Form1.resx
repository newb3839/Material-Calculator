<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AACpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAAAAAAQAAAAIAAAACAAAAAwAAAAQAAAAEAAAABQAA
        AAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAEAAAAAwAAAAIAAAACAAAAAQAAAAAAAAAAAAAAAAAA
        AAD///8A////AKmpqQCpqakAqampAAAAAAEAAAACAAAACwAAABQAAAAaAAAAHgAAACIAAAAlAAAAJwAA
        ACkAAAArAAAAKwAAACwAAAAtAAAALQAAACwAAAArISEhM3p6emiBgYFsPDw8NQAAACIAAAAeAAAAGAAA
        ABAAAAAHAAAAAP///wD///8AqampAKmpqQCpqakAAAAAAQAAAAgAAAAfAAAAMwAAAEAAAABPAAAAXAAA
        AFsAAABTAAAAUAAAAFIAAABUAAAAVAAAAFUAAABVAAAAVEBAQHCkpKT/jIyM/4uLi/+lpaX/WVlZdwAA
        AEQAAAA8AAAAKwAAABMAAAAC////AP///wCpqakAqampAKmpqQAAAAABAAAAAwAAABAAAAAdAAAAM2M8
        AIyOVwDvc0YA0wUDAFAAAAA7AAAAOQAAADoAAAA7AAAAPQAAADxsbGx1o6Oj/5GRkf+oqKj/srKy/7Cw
        sP+kpKT/cXFxWgAAACAAAAAXAAAACQAAAAH///8A////AKmpqQCpqakAqampAKmpqQCpqakAqampAAAA
        AAlrSRNVw3oH/KxpAP+KVAD/a0IAsAAAACEAAAAMAAAACgAAAAsAAAALa2trG6ampv+kpKT/zc3N/9LS
        0v/V1dX/2tra/7Gxsf+np6f/kpKSDwAAAAEAAAAAAAAAAP///wD///8AqampAKmpqQCpqakAqampAKmp
        qQCpqakAAAAAC7GNVZnbrmj/zY0p/6ZmAP+KVQH/UzQBbgAAAA8AAAACAAAAAQAAAAGpqamJmZmZ/8bG
        xv/W1tb/tra2/6mpqf+pqan/2tra/7a2tv+pqak9AAAAAAAAAAAAAAAA////AP///wCpqakAqampAKmp
        qQCpqakAqampAKmpqQAAAAAGTUIvNda5jePguXr/yYUX/59iAv+EUwPrIRUBNAAAAAapqakAqampV5+f
        n/+8vLz/y8vL/7m5uf+pqalqoaGh/7Ozs//a2tr/uLi4/6mpqTAAAAAA////AP///wD///8A////AKmp
        qQCpqakAqampAKmpqQCpqakAqampAAAAAAEAAAALWU47Rt3AlO/ftXL/xHsD/5ZfBP93TAS+AAAAHZ+f
        nzOlpaX/rKys/8vLy//Pz8//np6e/4yMjP+goKD/0NDQ/8zMzP+qqqr/qampBAAAAAD///8A////AP//
        /wD///8AqampAKmpqQCpqakAqampAKmpqQCpqakAqampAAAAAAEAAAAObmBKU+HFlvPesWf/vHgG/5Bd
        Bv9sTBWToKCgoaCgoP/R0dH/zMzM/8/Pz//Dw8P/vLy8/8rKyv/S0tL/rKys/6mpqRsAAAAAAAAAAP//
        /wD///8A////AP///wCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAAAAAAEAAAAPgHBXY+XI
        lvrcrFf/tHUI/5+KZv6dnZ3/1dXV/9TU1P/Ozs7/zc3N/8fHx//Ly8v/z8/P/6urq/+pqalBAAAAAAAA
        AAAAAAAA////AP///wD///8A////AKmpqQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAAAA
        AAIAAAATl4VneurLlf/Apnr/mpqa/9XV1f/d3d3/0NDQ/8jIyP/Hx8f/ycnJ/8rKyv+pqamgqampNwAA
        AAAAAAAAAAAAAAAAAAD///8A////AP///wD///8AqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmp
        qQCpqakAqampAAAAAAMAAAAYrqaXzp2dnf/S0tL/5eXl/9bW1v/Ly8v/ycnJ/8rKyv/Jycn/qamplqmp
        qR0AAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///wCpqakAqampAKmpqQCpqakAqampAKmp
        qQCpqakAqampAKmpqQCpqakAqampAKSkpGqdnZ3/zMzM/+3t7f/d3d3/zs7O/83Nzf/Nzc3/zMzM/6mp
        qZapqakTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8A////AKmpqQCpqakAqampAKmp
        qQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqalToKCg/7+/v//z8/P/5ubm/9HR0f/Q0ND/09PT/87O
        zv+ioqKdnp6eIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqampAKmp
        qQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampO6ampv+2trb/9vb2/+zs7P/b29v/2dnZ/9jY
        2P/S0tL/qqqq/3JkSXQAAAAMAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACpqakAqampAKmpqQCpqakAqampAKmpqQOpqakuqampQampqS+oqKj/pqam/+vr6//w8PD/3Nzc/9jY
        2P/f39//19fX/6ysrP+3kDz/l28X5y0hBzcAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKmpqQCpqakAqampAKmpqQCpqalWp6en/5iYmP+Xl5f/lpaW/5aWlv/S0tL/6Ojo/+Tk
        5P/e3t7/4uLi/9zc3P+wsLD/3Mmd/+qzOP+0hBz/kGsY0A4KAiUAAAAFdnZ2AHd3dwB3d3cAAAAAAQAA
        AAIAAAABbGxsAHx8fACBgYEAqampAKmpqQCpqakAqampjpeXl/+tra3/1tbW/9bW1v/FxcX/ycnJ/9PT
        0//g4OD/5OTk/+jo6P/g4OD/s7Oz/5CQkHLHs4iy89WP/+msIP+ugR3/hWMXsAAAABsAAAAEcnJyAAAA
        AAEAAAAMRUVFPAAAABIAAAAEbm5uAICAgACpqakAqampAKmpqW6YmJj/3t7e///////y8vL/4uLi/9jY
        2P/Nzc3/zc3N/+Dg4P/r6+v/5ubm/7e3t/+pqalwAAAABRMRDSbcx5bU9NKD/+CnIf+lfB7/blMUkQAA
        ABsAAAADAAAABURERENzc3P/ZmZmqgAAABYAAAADdXV1AKmpqQCpqakMpqam/7a2tv/u7u7/7e3t/+fn
        5//b29v/0dHR/8fHx//IyMj/4uLi/+np6f+8vLz/qampfKmpqQB1dXUAAAAACExEMzvo0pzp7Mlz/76P
        IP97a0b+XE8vjQAAABYAAAAUVVVVdoGBgf+Pj4//bm5ujAAAABEAAAABqampAKmpqTeZmZn/ysrK/+fn
        5//t7e3/6enp/9/f3//U1NT/ycnJ/8jIyP/k5OT/19fX/6mpqdCpqakAqampAHV1dQAAAAABAAAADHRo
        TlnMuYj4hXxo/3p6ev99fXz0WVlZg1dXV32Hh4fprKys/6Ojo/+hoaH/ZWVlSgAAAAOpqakAqampUI6O
        jv/Q0ND/4+Pj/9jY2P+ysrL/xMTE/+Dg4P/Nzc3/yMjI/+Dg4P/q6ur/s7Oz/6mpqSipqakAdXV1AHV1
        dQAAAAACAAAAGZWRhcGurq7/o6Oj/5iYmP+cnJz/mZmZ/6qqqv/BwcH/t7e34JqamqhBQUEjAAAAAqmp
        qQCpqalCkZGR/8jIyP/Z2dn/q6ur/6mpqTupqan/pqam/87Ozv/Ly8v/3d3d/+3t7f+4uLj/qampNqmp
        qQB1dXUAdnZ2AJmZmQAAAAAHDg4OK7+/v9nk5OT/0dHR/7S0tP+1tbX/tLS0/5ubm6gAAAAgAAAADwAA
        AAWWlpYAqampAKmpqSCgoKD/w8PD/6+vr/+pqalMqampAKmpqXabm5v/x8fH/83Nzf/a2tr/5ubm/7Ky
        sv+pqakcqampAHZ2dgB3d3cAhYWFAL29vQAAAAAOiIiIetzc3P/q6ur/2dnZ/8bGxv+urq7iAAAAHgAA
        AASurq4An5+fAJCQkACpqakAqampAqmpqf+qqqr/qampR6mpqQCpqalwnp6e/8HBwf/T09P/ycnJ/9jY
        2P/X19f/qamp/6mpqQGpqakAcXFxAGpqagBkZGQAAAAAAwAAABVwcHCMx8fH/+Dg4P/Q0ND/xcXF9YCA
        gGgAAAAKoaGhAJiYmACNjY0AiIiIAKmpqQCpqakAqampAqmpqQWpqakAqampKJubm//Dw8P/4uLi/9DQ
        0P/MzMz/1tbW/7S0tP+pqalAqampAAAAAAEAAAAIAAAAEAAAABcYGBgpVVVVgpaWlvXl5eX/zc3N/8LC
        wuZjY2NHAAAADgAAAAKXl5cAi4uLAIaGhgCFhYUAqampAKmpqQCpqakAqampAKmpqQCpqamPra2t//Dw
        8P/c3Nz/1NTU/83Nzf+0tLT/qampc6mpqQCpqakAAAAAAn9/fzeAgICydXV1wYaGhvW0tLT/4+Pj/8zM
        zP+0tLTGPz8/LgAAAAkAAAABmpqaAI6OjgCHh4cAhYWFAIWFhQCpqakAqampAKmpqQCpqakAqampAKmp
        qSaurq7/t7e3/7m5uf+0tLT/qamppampqTypqakAqampAKmpqQAAAAABAAAACF5eXivFxcWpzs7O376+
        vtKsrKywhYWFYwAAABYAAAAGp6enAJmZmQCOjo4AiIiIAIWFhQCFhYUAhYWFAKmpqQCpqakAqampAKmp
        qQCpqakAqampAKmpqRipqak0qampQKmpqSqpqakAqampAKmpqQCpqakAqampAKmpqQDOzs4AAAAABQAA
        ABAAAAAWAAAAFgAAABAAAAAIAAAAAqKiogCWlpYAjIyMAIeHhwCFhYUAhYWFAIWFhQCFhYUAqampAKmp
        qQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmpqQCpqakAqampAKmp
        qQCpqakAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/gAAP+AAAAfgAAAD4AAAA/wAAA/8AAAf/AEAH/wAAB/+AAA//wAAf/+A
        AP//wAH//+AD///AB///gAP/+AAD//AAAcfgAACDwAAAAYABgACAA4AAgAHAAIAB4AGCAfAHhAHgD8gC
        AA/4BgAf+A4Af/w/gP////////////////8=
</value>
  </data>
</root>